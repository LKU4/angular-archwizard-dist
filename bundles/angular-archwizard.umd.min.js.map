{
  "version": 3,
  "file": "angular-archwizard.umd.min.js",
  "sources": [
    "ng://angular-archwizard/node_modules/tslib/tslib.es6.js",
    "ng://angular-archwizard/out/directives/wizard-step-title.directive.ts",
    "ng://angular-archwizard/out/util/wizard-step.interface.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.interface.ts",
    "ng://angular-archwizard/out/navigation/free-navigation-mode.ts",
    "ng://angular-archwizard/out/util/wizard-completion-step.interface.ts",
    "ng://angular-archwizard/out/navigation/semi-strict-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/strict-navigation-mode.ts",
    "ng://angular-archwizard/out/navigation/navigation-mode.provider.ts",
    "ng://angular-archwizard/out/navigation/wizard-state.model.ts",
    "ng://angular-archwizard/out/components/wizard.component.ts",
    "ng://angular-archwizard/out/components/wizard-completion-step.component.ts",
    "ng://angular-archwizard/out/components/wizard-navigation-bar.component.ts",
    "ng://angular-archwizard/out/components/wizard-step.component.ts",
    "ng://angular-archwizard/out/directives/enable-back-links.directive.ts",
    "ng://angular-archwizard/out/util/step-offset.interface.ts",
    "ng://angular-archwizard/out/util/step-id.interface.ts",
    "ng://angular-archwizard/out/util/step-index.interface.ts",
    "ng://angular-archwizard/out/directives/go-to-step.directive.ts",
    "ng://angular-archwizard/out/directives/next-step.directive.ts",
    "ng://angular-archwizard/out/directives/optional-step.directive.ts",
    "ng://angular-archwizard/out/directives/previous-step.directive.ts",
    "ng://angular-archwizard/out/directives/reset-wizard.directive.ts",
    "ng://angular-archwizard/out/directives/selected-step.directive.ts",
    "ng://angular-archwizard/out/directives/wizard-completion-step.directive.ts",
    "ng://angular-archwizard/out/directives/wizard-step.directive.ts",
    "ng://angular-archwizard/out/archwizard.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/**\r\n * Created by marc on 01.06.17.\r\n */\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\r\n * to define the content of a step title inside the navigation bar.\r\n * This step title can be freely created and can contain more than only plain text\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <ng-template awWizardStepTitle>\r\n *     ...\r\n * </ng-template>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\r\n})\r\nexport class WizardStepTitleDirective {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\r\n   */\r\n  constructor(public templateRef: TemplateRef<any>) { }\r\n}\r\n",
    "import {MovingDirection} from './moving-direction.enum';\r\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\r\nimport {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\r\nimport {isBoolean} from 'util';\r\nimport {NavigationSymbol} from './navigation-symbol.interface';\r\n\r\n/**\r\n * Basic functionality every type of wizard step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardStep {\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is then shown inside the navigation bar.\r\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\r\n   */\r\n  @ContentChild(WizardStepTitleDirective)\r\n  public stepTitleTemplate: WizardStepTitleDirective;\r\n\r\n  /**\r\n   * A step id, unique to the step\r\n   */\r\n  @Input()\r\n  public stepId: string;\r\n\r\n  /**\r\n   * A step title property, which contains the visible header title of the step.\r\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\r\n   */\r\n  @Input()\r\n  public stepTitle: string;\r\n\r\n  /**\r\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\r\n   */\r\n  @Input()\r\n  public navigationSymbol: NavigationSymbol = { symbol: '' };\r\n\r\n  /**\r\n   * A boolean describing if the wizard step has been completed\r\n   */\r\n  public completed = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is currently selected\r\n   */\r\n  public selected = false;\r\n\r\n  /**\r\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\r\n   */\r\n  public defaultSelected = false;\r\n\r\n  /**\r\n   * A boolean describing if the wizard step is an optional step\r\n   */\r\n  public optional = false;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be entered\r\n   */\r\n  @Input()\r\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * A function or boolean deciding, if this step can be exited\r\n   */\r\n  @Input()\r\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is entered.\r\n   * The bound method should be used to do initialization work.\r\n   */\r\n  @Output()\r\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Returns if this wizard step should be visible to the user.\r\n   * If the step should be visible to the user false is returned, otherwise true\r\n   */\r\n  @HostBinding('hidden')\r\n  public get hidden(): boolean {\r\n    return !this.selected;\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be transitioned with a given direction.\r\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\r\n   *\r\n   * @param condition A condition variable, deciding if the step can be transitioned\r\n   * @param direction The direction in which this step should be transitioned\r\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\r\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\r\n   */\r\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\r\n                                     ((direction: MovingDirection) => Promise<boolean>) |\r\n                                     boolean,\r\n                                   direction: MovingDirection): Promise<boolean> {\r\n    if (isBoolean(condition)) {\r\n      return Promise.resolve(condition as boolean);\r\n    } else if (condition instanceof Function) {\r\n      return Promise.resolve(condition(direction));\r\n    } else {\r\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is entered\r\n   *\r\n   * @param direction The direction in which the step is entered\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * A function called when the step is exited\r\n   *\r\n   * @param direction The direction in which the step is exited\r\n   */\r\n  public exit(direction: MovingDirection) {\r\n    this.stepExit.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be entered from the given direction.\r\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be entered\r\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\r\n   */\r\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canEnter, direction);\r\n  }\r\n\r\n  /**\r\n   * This method returns true, if this wizard step can be exited into given direction.\r\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\r\n   * nor a function.\r\n   *\r\n   * @param direction The direction in which this step should be left\r\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\r\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\r\n   */\r\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\r\n    return WizardStep.canTransitionStep(this.canExit, direction);\r\n  }\r\n}\r\n",
    "import {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * An interface describing the basic functionality, which must be provided by a navigation mode.\r\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class NavigationMode {\r\n  constructor(protected wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\r\n   */\r\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\r\n\r\n  /**\r\n   * Tries to transition to the wizard step, as denoted by the given destination index.\r\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\r\n\r\n  /**\r\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\r\n   *\r\n   * @param destinationIndex The index of the destination step\r\n   * @returns True if the step can be navigated to, false otherwise\r\n   */\r\n  abstract isNavigable(destinationIndex: number): boolean;\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  abstract reset(): void;\r\n\r\n  /**\r\n   * Tries to transition the wizard to the previous step from the `currentStep`\r\n   */\r\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasPreviousStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to transition the wizard to the next step from the `currentStep`\r\n   */\r\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    if (this.wizardState.hasNextStep()) {\r\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\r\n    }\r\n  }\r\n}\r\n",
    "import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\r\n * as long as the current step can be exited in the given direction\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class FreeNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n",
    "import {WizardStep} from './wizard-step.interface';\r\nimport {MovingDirection} from './moving-direction.enum';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * Basic functionality every wizard completion step needs to provide\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport abstract class WizardCompletionStep extends WizardStep {\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public enter(direction: MovingDirection): void {\r\n    this.completed = true;\r\n    this.stepEnter.emit(direction);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  public exit(direction: MovingDirection): void {\r\n    // set this completion step as incomplete\r\n    this.completed = false;\r\n    this.stepExit.emit(direction);\r\n  }\r\n}\r\n",
    "import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class SemiStrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\r\n    const destinationStep = (previous: boolean) => {\r\n      if (previous) {\r\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex)\r\n          .every(step => step.completed || step.optional || step.selected);\r\n\r\n        return Promise.resolve(\r\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(destinationStep);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        // the current step can be exited in the given direction\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  isNavigable(destinationIndex: number): boolean {\r\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\r\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\r\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\r\n        .every(step => step.completed || step.optional || step.selected);\r\n    } else {\r\n      // a \"normal\" step can always be entered\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // the default step is a completion step and the wizard contains more than one step\r\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\r\n      this.wizardState.wizardSteps.length !== 1;\r\n\r\n    if (defaultCompletionStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n",
    "import {NavigationMode} from './navigation-mode.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardState} from './wizard-state.model';\r\nimport {EventEmitter} from '@angular/core';\r\n\r\n/**\r\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\r\n * The user can only navigation to a given destination step, if:\r\n * - the current step can be exited in the direction of the destination step\r\n * - all previous steps to the destination step have been completed or are optional\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport class StrictNavigationMode extends NavigationMode {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\r\n   */\r\n  constructor(wizardState: WizardState) {\r\n    super(wizardState);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the wizard can be transitioned to the given destination step.\r\n   * A destination wizard step can be entered if:\r\n   * - it exists\r\n   * - the current step can be exited in the direction of the destination step\r\n   * - all previous steps to the destination step have been completed or are optional\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step\r\n   * @returns True if the destination wizard step can be entered, false otherwise\r\n   */\r\n  canGoToStep(destinationIndex: number): Promise<boolean> {\r\n    const hasStep = this.wizardState.hasStep(destinationIndex);\r\n\r\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n    const canExitCurrentStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const canEnterDestinationStep = (previous: boolean) => {\r\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\r\n    };\r\n\r\n    const allPreviousStepsComplete = (previous: boolean) => {\r\n      if (previous) {\r\n        return Promise.resolve(this.wizardState.wizardSteps\r\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\r\n          .every(step => step.completed || step.optional)\r\n        );\r\n      } else {\r\n        return Promise.resolve(false);\r\n      }\r\n    };\r\n\r\n    return Promise.resolve(hasStep)\r\n      .then(canExitCurrentStep)\r\n      .then(canEnterDestinationStep)\r\n      .then(allPreviousStepsComplete);\r\n  }\r\n\r\n  /**\r\n   * Tries to enter the wizard step with the given destination index.\r\n   * When entering the destination step, the following actions are done:\r\n   * - the old current step is set as completed\r\n   * - the old current step is set as unselected\r\n   * - the old current step is exited\r\n   * - all steps between the old current step and the destination step are marked as incomplete\r\n   * - the destination step is set as selected\r\n   * - the destination step is entered\r\n   *\r\n   * When the destination step couldn't be entered, the following actions are done:\r\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\r\n   *\r\n   * @param destinationIndex The index of the destination wizard step, which should be entered\r\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\r\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\r\n   */\r\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\r\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\r\n      if (navigationAllowed) {\r\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\r\n\r\n        /* istanbul ignore if */\r\n        if (preFinalize) {\r\n          preFinalize.emit();\r\n        }\r\n\r\n        // leave current step\r\n        this.wizardState.currentStep.completed = true;\r\n        this.wizardState.currentStep.exit(movingDirection);\r\n        this.wizardState.currentStep.selected = false;\r\n\r\n        // set all steps after the destination step to incomplete\r\n        this.wizardState.wizardSteps\r\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\r\n          .forEach(step => step.completed = false);\r\n\r\n        this.wizardState.currentStepIndex = destinationIndex;\r\n\r\n        // go to next step\r\n        this.wizardState.currentStep.enter(movingDirection);\r\n        this.wizardState.currentStep.selected = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (postFinalize) {\r\n          postFinalize.emit();\r\n        }\r\n      } else {\r\n        // if the current step can't be left, reenter the current step\r\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\r\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\r\n      }\r\n    });\r\n  }\r\n\r\n  isNavigable(destinationIndex: number): boolean {\r\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\r\n    return destinationIndex < this.wizardState.currentStepIndex;\r\n  }\r\n\r\n  /**\r\n   * Resets the state of this wizard.\r\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\r\n   * In addition the whole wizard is set as incomplete\r\n   */\r\n  reset(): void {\r\n    // the wizard doesn't contain a step with the default step index\r\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\r\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\r\n    }\r\n\r\n    // at least one step is before the default step, that is not optional\r\n    const illegalDefaultStep = this.wizardState.wizardSteps\r\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\r\n      .some(step => !step.optional);\r\n\r\n    if (illegalDefaultStep) {\r\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\r\n    }\r\n\r\n    // reset the step internal state\r\n    this.wizardState.wizardSteps.forEach(step => {\r\n      step.completed = false;\r\n      step.selected = false;\r\n    });\r\n\r\n    // set the first step as the current step\r\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\r\n    this.wizardState.currentStep.selected = true;\r\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\r\n  }\r\n}\r\n",
    "import {FreeNavigationMode} from './free-navigation-mode';\r\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\r\nimport {StrictNavigationMode} from './strict-navigation-mode';\r\n\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {WizardState} from './wizard-state.model';\r\n\r\n/**\r\n * A factory method used to create [[NavigationMode]] instances\r\n *\r\n * @param navigationMode The name of the to be used navigation mode\r\n * @param wizardState The wizard state of the wizard\r\n * @returns The created [[NavigationMode]]\r\n */\r\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\r\n  switch (navigationMode) {\r\n    case 'free':\r\n      return new FreeNavigationMode(wizardState);\r\n    case 'semi-strict':\r\n      return new SemiStrictNavigationMode(wizardState);\r\n    case 'strict':\r\n    default:\r\n      return new StrictNavigationMode(wizardState);\r\n  }\r\n};\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {NavigationMode} from './navigation-mode.interface';\r\nimport {navigationModeFactory} from './navigation-mode.provider';\r\n\r\n/**\r\n * The internal model/state of a wizard.\r\n * This model contains:\r\n * - an array with all steps the wizard contains\r\n * - the index of the step the wizard currently resides inside\r\n * - information about the completeness of the wizard\r\n * - some additional helper methods\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Injectable()\r\nexport class WizardState {\r\n  /**\r\n   * The initial step index, as taken from the [[WizardComponent]]\r\n   */\r\n  private _defaultStepIndex = 0;\r\n\r\n  /**\r\n   * An array representation of all wizard steps belonging to this model\r\n   */\r\n  public wizardSteps: Array<WizardStep> = [];\r\n\r\n  /**\r\n   * Sets the initial default step.\r\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\r\n   *\r\n   * @param defaultStepIndex The new default wizard step index\r\n   */\r\n  public set defaultStepIndex(defaultStepIndex) {\r\n    this._defaultStepIndex = defaultStepIndex;\r\n  }\r\n\r\n  /**\r\n   * The initial step index.\r\n   * This value can be either:\r\n   * - the index of a wizard step with a `selected` directive, or\r\n   * - the default step index, set in the [[WizardComponent]]\r\n   */\r\n  public get defaultStepIndex(): number {\r\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\r\n\r\n    if (foundDefaultStep) {\r\n      return this.getIndexOfStep(foundDefaultStep);\r\n    } else {\r\n      return this._defaultStepIndex;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\r\n   * If this wizard contains no steps, currentStepIndex is -1\r\n   */\r\n  public currentStepIndex = -1;\r\n\r\n  /**\r\n   * The navigation mode used to navigate inside the wizard\r\n   */\r\n  public navigationMode: NavigationMode;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  public disableNavigationBar: boolean;\r\n\r\n  /**\r\n   * The WizardStep object belonging to the currently visible and selected step.\r\n   * The currentStep is always the currently selected wizard step.\r\n   * The currentStep can be either completed, if it was visited earlier,\r\n   * or not completed, if it is visited for the first time or its state is currently out of date.\r\n   *\r\n   * If this wizard contains no steps, currentStep is null\r\n   */\r\n  public get currentStep(): WizardStep {\r\n    if (this.hasStep(this.currentStepIndex)) {\r\n      return this.wizardSteps[this.currentStepIndex];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The completeness of the wizard.\r\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\r\n   */\r\n  public get completed(): boolean {\r\n    return this.wizardSteps.every(step => step.completed || step.optional);\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * Updates the navigation mode to the navigation mode with the given name\r\n   *\r\n   * @param updatedNavigationMode The name of the new navigation mode\r\n   */\r\n  updateNavigationMode(updatedNavigationMode: string): void {\r\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the wizard steps to the new array\r\n   *\r\n   * @param updatedWizardSteps The updated wizard steps\r\n   */\r\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\r\n    // the wizard is currently not in the initialization phase\r\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\r\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\r\n    }\r\n\r\n    this.wizardSteps = updatedWizardSteps;\r\n  }\r\n\r\n  /**\r\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\r\n   *\r\n   * @param stepIndex The to be checked index of a step inside this wizard\r\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\r\n   */\r\n  hasStep(stepIndex: number): boolean {\r\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a previous step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a previous step before the current step\r\n   */\r\n  hasPreviousStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard has a next step, compared to the current step\r\n   *\r\n   * @returns True if this wizard has a next step after the current step\r\n   */\r\n  hasNextStep(): boolean {\r\n    return this.hasStep(this.currentStepIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Checks if this wizard is currently inside its last step\r\n   *\r\n   * @returns True if the wizard is currently inside its last step\r\n   */\r\n  isLastStep(): boolean {\r\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\r\n   * If no [[WizardStep]] exists at the given index an Error is thrown\r\n   *\r\n   * @param stepIndex The given index\r\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\r\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\r\n   */\r\n  getStepAtIndex(stepIndex: number): WizardStep {\r\n    if (!this.hasStep(stepIndex)) {\r\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\r\n    }\r\n\r\n    return this.wizardSteps[stepIndex];\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the step with the given `stepId`.\r\n   * If no step with the given `stepId` exists, `-1` is returned\r\n   *\r\n   * @param stepId The given step id\r\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\r\n   */\r\n  getIndexOfStepWithId(stepId: string): number {\r\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\r\n  }\r\n\r\n  /**\r\n   * Finds the index of the given [[WizardStep]] `step`.\r\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\r\n   *\r\n   * @param step The given [[WizardStep]]\r\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\r\n   */\r\n  getIndexOfStep(step: WizardStep): number {\r\n    return this.wizardSteps.indexOf(step);\r\n  }\r\n\r\n  /**\r\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\r\n   *\r\n   * @param destinationStep The given destination step\r\n   * @returns The calculated [[MovingDirection]]\r\n   */\r\n  getMovingDirection(destinationStep: number): MovingDirection {\r\n    let movingDirection: MovingDirection;\r\n\r\n    if (destinationStep > this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Forwards;\r\n    } else if (destinationStep < this.currentStepIndex) {\r\n      movingDirection = MovingDirection.Backwards;\r\n    } else {\r\n      movingDirection = MovingDirection.Stay;\r\n    }\r\n\r\n    return movingDirection;\r\n  }\r\n}\r\n",
    "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard` component defines the root component of a wizard.\r\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\r\n * of its navigation bar.\r\n *\r\n * ### Syntax\r\n * ```html\r\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\r\n *     ...\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * Without completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * With completion step:\r\n *\r\n * ```html\r\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-step>...</aw-wizard-step>\r\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\r\n * </aw-wizard>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard',\r\n  template: `<aw-wizard-navigation-bar\r\n  [direction]=\"navBarDirection\"\r\n  *ngIf=\"navBarLocation == 'top' || navBarLocation == 'left'\"\r\n  [ngClass]=\"{\r\n    vertical: navBarLocation == 'left',\r\n    horizontal: navBarLocation == 'top',\r\n    small: navBarLayout == 'small',\r\n    'large-filled': navBarLayout == 'large-filled',\r\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\r\n    'large-empty': navBarLayout == 'large-empty',\r\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\r\n  }\">\r\n</aw-wizard-navigation-bar>\r\n\r\n<div [ngClass]=\"{\r\n  'wizard-steps': true,\r\n  vertical: navBarLocation == 'left' || navBarLocation == 'right',\r\n  horizontal: navBarLocation == 'top' || navBarLocation == 'bottom'\r\n}\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<aw-wizard-navigation-bar\r\n  [direction]=\"navBarDirection\"\r\n  *ngIf=\"navBarLocation == 'bottom' || navBarLocation == 'right'\"\r\n  [ngClass]=\"{\r\n    vertical: navBarLocation == 'right',\r\n    horizontal: navBarLocation == 'bottom',\r\n    small: navBarLayout == 'small',\r\n    'large-filled': navBarLayout == 'large-filled',\r\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\r\n    'large-empty': navBarLayout == 'large-empty',\r\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\r\n  }\">\r\n</aw-wizard-navigation-bar>\r\n`,\r\n  styles: [`aw-wizard{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}aw-wizard.vertical{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}aw-wizard.horizontal{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps{top:0;display:-webkit-box;display:-ms-flexbox;display:flex}aw-wizard .wizard-steps.vertical{min-width:calc(100% - 280px);width:80%;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}aw-wizard .wizard-steps.horizontal{width:100%;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [WizardState]\r\n})\r\nexport class WizardComponent implements OnChanges, AfterContentInit {\r\n  /**\r\n   * A QueryList containing all [[WizardStep]]s inside this wizard\r\n   */\r\n  @ContentChildren(WizardStep, { descendants: true })\r\n  public wizardSteps: QueryList<WizardStep>;\r\n\r\n  /**\r\n   * The location of the navigation bar inside the wizard.\r\n   * This location can be either top, bottom, left or right\r\n   */\r\n  @Input()\r\n  public navBarLocation = 'top';\r\n\r\n  /**\r\n   * The layout of the navigation bar inside the wizard.\r\n   * The layout can be either small, large-filled, large-empty or large-symbols\r\n   */\r\n  @Input()\r\n  public navBarLayout = 'small';\r\n\r\n  /**\r\n   * The direction in which the steps inside the navigation bar should be shown.\r\n   * The direction can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public navBarDirection = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode used for transitioning between different steps.\r\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\r\n   */\r\n  @Input()\r\n  public navigationMode = 'strict';\r\n\r\n  /**\r\n   * The initially selected step, represented by its index\r\n   */\r\n  @Input()\r\n  public defaultStepIndex = 0;\r\n\r\n  /**\r\n   * True, if the navigation bar shouldn't be used for navigating\r\n   */\r\n  @Input()\r\n  public disableNavigationBar = false;\r\n\r\n  /**\r\n   * Returns true if this wizard uses a horizontal orientation.\r\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\r\n   *\r\n   * @returns True if this wizard uses a horizontal orientation\r\n   */\r\n  @HostBinding('class.horizontal')\r\n  public get horizontalOrientation(): boolean {\r\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\r\n  }\r\n\r\n  /**\r\n   * Returns true if this wizard uses a vertical orientation.\r\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\r\n   *\r\n   * @returns True if this wizard uses a vertical orientation\r\n   */\r\n  @HostBinding('class.vertical')\r\n  public get verticalOrientation(): boolean {\r\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\r\n  }\r\n\r\n  /**\r\n   * The navigation mode for this wizard\r\n   */\r\n  public get navigation(): NavigationMode {\r\n    return this.model.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param model The model for this wizard component\r\n   */\r\n  constructor(public model: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Updates the model after certain input values have changed\r\n   *\r\n   * @param changes The detected changes\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    for (const propName of Object.keys(changes)) {\r\n      let change = changes[propName];\r\n\r\n      if (!change.firstChange) {\r\n        switch (propName) {\r\n          case 'defaultStepIndex':\r\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\r\n            break;\r\n          case 'disableNavigationBar':\r\n            this.model.disableNavigationBar = change.currentValue;\r\n            break;\r\n          case 'navigationMode':\r\n            this.model.updateNavigationMode(change.currentValue);\r\n            break;\r\n          /* istanbul ignore next */\r\n          default:\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngAfterContentInit(): void {\r\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\r\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\r\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\r\n    });\r\n\r\n    // initialize the model\r\n    this.model.disableNavigationBar = this.disableNavigationBar;\r\n    this.model.defaultStepIndex = this.defaultStepIndex;\r\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\r\n    this.model.updateNavigationMode(this.navigationMode);\r\n\r\n    // finally reset the whole wizard state\r\n    this.navigation.reset();\r\n  }\r\n}\r\n",
    "/**\r\n * Created by marc on 20.05.17.\r\n */\r\n\r\nimport {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\r\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-completion-step',\r\n  template: `<ng-content></ng-content>\r\n`,\r\n  styles: [`aw-wizard-completion-step{height:auto;width:100%}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\r\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\r\n  ]\r\n})\r\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\r\n}\r\n",
    "import {Component, Input, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\r\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\r\n * otherwise it will look like a normal `ul` component.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-navigation-bar',\r\n  template: `<ul class=\"steps-indicator steps-{{numberOfWizardSteps}}\">\r\n  <li *ngFor=\"let step of wizardSteps\"\r\n      [attr.step-symbol]=\"step.navigationSymbol.symbol\"\r\n      [ngStyle]=\"{\r\n        'font-family': step.navigationSymbol.fontFamily\r\n      }\"\r\n      [ngClass]=\"{\r\n        default: isDefault(step),\r\n        current: isCurrent(step),\r\n        done: isDone(step),\r\n        editing: isEditing(step),\r\n        optional: isOptional(step),\r\n        navigable: isNavigable(step)\r\n  }\">\r\n    <div>\r\n      <a [awGoToStep]=\"step\">\r\n        <ng-container *ngIf=\"step.stepTitleTemplate\" [ngTemplateOutlet]=\"step.stepTitleTemplate.templateRef\"></ng-container>\r\n        <ng-container *ngIf=\"!step.stepTitleTemplate\">{{step.stepTitle}}</ng-container>\r\n      </a>\r\n    </div>\r\n  </li>\r\n</ul>\r\n`,\r\n  styles: [`aw-wizard-navigation-bar.horizontal.small ul.steps-indicator{padding:24px 0 10px}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 14px);top:-7px;left:calc(50% + 7px)}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li:after{position:absolute;top:-14px;left:calc(50% - 7px);width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.horizontal.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.horizontal.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator{padding:60px 0 10px}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;height:1px;width:calc(100% - 50px);top:-25px;left:calc(50% + 25px)}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:-50px;left:calc(50% - 25px);width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.horizontal.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.horizontal ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;right:0;bottom:0;left:0;margin:0;width:100%;list-style:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2:before{left:25%;right:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-2 li{width:50%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3:before{left:16.66666667%;right:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-3 li{width:33.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4:before{left:12.5%;right:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-4 li{width:25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5:before{left:10%;right:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-5 li{width:20%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6:before{left:8.33333333%;right:8.33333333%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-6 li{width:16.66666667%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7:before{left:7.14285714%;right:7.14285714%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-7 li{width:14.28571429%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8:before{left:6.25%;right:6.25%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-8 li{width:12.5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9:before{left:5.55555556%;right:5.55555556%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-9 li{width:11.11111111%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10:before{left:5%;right:5%}aw-wizard-navigation-bar.horizontal ul.steps-indicator.steps-10 li{width:10%}aw-wizard-navigation-bar.horizontal ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.horizontal ul.steps-indicator li{position:relative;margin:0;padding:10px 0 0;pointer-events:none}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a{color:grey;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:center;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.horizontal ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.horizontal ul.steps-indicator li.navigable{pointer-events:auto}`, `aw-wizard-navigation-bar.vertical{max-width:280px;width:20%;height:100%;position:-webkit-sticky;position:sticky;top:0}aw-wizard-navigation-bar.vertical.small ul.steps-indicator{padding:5px 5px 5px 19px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-7px;top:14px;height:calc(100% - 14px);width:1px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li:after{position:absolute;top:0;left:-14px;width:14px;height:14px;content:'';text-align:center;vertical-align:middle;line-height:14px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li div{min-height:14px}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.small ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.current:after{background-color:grey}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.done:after{background-color:#393}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.optional:after{background-color:#38ef38}aw-wizard-navigation-bar.vertical.large-filled ul.steps-indicator li.editing:after{background-color:red}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.current:after{border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.done:after{border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.optional:after{border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty ul.steps-indicator li.editing:after{border:2px solid red}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:50px;-webkit-transition:.25s;transition:.25s;border-radius:100%;background-color:#e6e6e6;color:#000;content:attr(step-symbol)}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li div{min-height:50px}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.current:after{background-color:grey;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.done:after{background-color:#393;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.optional:after{background-color:#38ef38;color:#000}aw-wizard-navigation-bar.vertical.large-filled-symbols ul.steps-indicator li.editing:after{background-color:red;color:#000}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator{padding:5px 5px 5px 55px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:not(:last-child):before{background-color:#e6e6e6;content:'';position:absolute;left:-25px;top:50px;height:calc(100% - 50px);width:1px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li:after{position:absolute;top:0;left:-50px;width:50px;height:50px;content:'';text-align:center;vertical-align:middle;line-height:46px;-webkit-transition:.25s;transition:.25s;border-radius:100%;color:#e6e6e6;content:attr(step-symbol);border:2px solid #e6e6e6}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li div{min-height:54px}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.default a:hover{color:grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.current:after{color:grey;border:2px solid grey}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.done:after{color:#393;border:2px solid #393}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.optional:after{color:#38ef38;border:2px solid #38ef38}aw-wizard-navigation-bar.vertical.large-empty-symbols ul.steps-indicator li.editing:after{color:red;border:2px solid red}aw-wizard-navigation-bar.vertical ul.steps-indicator{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;list-style:none;margin:auto}aw-wizard-navigation-bar.vertical ul.steps-indicator *{-webkit-box-sizing:border-box;box-sizing:border-box}aw-wizard-navigation-bar.vertical ul.steps-indicator li{position:relative;pointer-events:none}aw-wizard-navigation-bar.vertical ul.steps-indicator li:not(:last-child){margin-bottom:0;padding-bottom:10px}aw-wizard-navigation-bar.vertical ul.steps-indicator li div{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a{color:grey;margin-left:15px;line-height:14px;font-size:14px;text-decoration:none;text-transform:uppercase;text-align:left;font-weight:700;-webkit-transition:.25s;transition:.25s;cursor:pointer}aw-wizard-navigation-bar.vertical ul.steps-indicator li div a:hover{color:#4d4d4d}aw-wizard-navigation-bar.vertical ul.steps-indicator li.navigable{pointer-events:auto}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class WizardNavigationBarComponent {\r\n  /**\r\n   * The direction in which the wizard steps should be shown in the navigation bar.\r\n   * This value can be either `left-to-right` or `right-to-left`\r\n   */\r\n  @Input()\r\n  public direction = 'left-to-right';\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  public get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state the wizard currently resides in\r\n   */\r\n  constructor(public wizardState: WizardState) {\r\n  }\r\n\r\n  /**\r\n   * Returns all [[WizardStep]]s contained in the wizard\r\n   *\r\n   * @returns An array containing all [[WizardStep]]s\r\n   */\r\n  get wizardSteps(): Array<WizardStep> {\r\n    switch (this.direction) {\r\n      case 'right-to-left':\r\n        return this.wizardState.wizardSteps.slice().reverse();\r\n      case 'left-to-right':\r\n      default:\r\n        return this.wizardState.wizardSteps;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\r\n   *\r\n   * @returns The number of wizard steps to be displayed\r\n   */\r\n  get numberOfWizardSteps(): number {\r\n    return this.wizardState.wizardSteps.length;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as current\r\n   */\r\n  public isCurrent(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as done\r\n   */\r\n  public isDone(wizardStep: WizardStep): boolean {\r\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as default\r\n   */\r\n  public isDefault(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as editing\r\n   */\r\n  public isEditing(wizardStep: WizardStep): boolean {\r\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as optional\r\n   */\r\n  public isOptional(wizardStep: WizardStep): boolean {\r\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed\r\n  }\r\n\r\n  /**\r\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\r\n   * A wizard step can be navigated to if:\r\n   * - the step is currently not selected\r\n   * - the navigation bar isn't disabled\r\n   * - the navigation mode allows navigation to the step\r\n   *\r\n   * @param wizardStep The wizard step to be checked\r\n   * @returns True if the step can be marked as navigable\r\n   */\r\n  public isNavigable(wizardStep: WizardStep): boolean {\r\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\r\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\r\n  }\r\n}\r\n",
    "import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` input:\r\n *\r\n * ```html\r\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` directive:\r\n *\r\n * ```html\r\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` input:\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` directive:\r\n *\r\n * ```html\r\n * <aw-wizard-step [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Component({\r\n  selector: 'aw-wizard-step',\r\n  template: `<ng-content></ng-content>\r\n`,\r\n  styles: [`aw-wizard-step{height:auto;width:100%}`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\r\n  ]\r\n})\r\nexport class WizardStepComponent extends WizardStep {\r\n}\r\n",
    "import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\r\nimport {MovingDirection} from '../util/moving-direction.enum';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\r\n *     ...\r\n * </aw-wizard-completion-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awEnableBackLinks]'\r\n})\r\nexport class EnableBackLinksDirective implements OnInit {\r\n  /**\r\n   * This EventEmitter is called when the step is exited.\r\n   * The bound method can be used to do cleanup work.\r\n   */\r\n  @Output()\r\n  public stepExit = new EventEmitter<MovingDirection>();\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param completionStep The wizard completion step, which should be exitable\r\n   */\r\n  constructor(@Host() private completionStep: WizardCompletionStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.completionStep.canExit = true;\r\n    this.completionStep.stepExit = this.stepExit;\r\n  }\r\n}\r\n",
    "/**\r\n * An offset between two steps.\r\n * This offset can be either positive or negative.\r\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\r\n * that the offset step is ahead of the other step.\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepOffset {\r\n  /**\r\n   * The offset to the destination step\r\n   */\r\n  stepOffset: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepOffset]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepOffset]] and false otherwise\r\n */\r\nexport function isStepOffset(value: any): value is StepOffset {\r\n  return value.hasOwnProperty('stepOffset');\r\n}\r\n",
    "import {WizardStep} from './wizard-step.interface';\r\n\r\n/**\r\n * An unique identifier of a wizard step\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepId {\r\n  /**\r\n   * The id of the destination step\r\n   */\r\n  stepId: string\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepId]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepId]] and false otherwise\r\n */\r\nexport function isStepId(value: any): value is StepId {\r\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\r\n}\r\n",
    "/**\r\n * An index of a wizard step.\r\n * This index is the index of the step inside the wizard.\r\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\r\n *\r\n * @author Marc Arndt\r\n */\r\nexport interface StepIndex {\r\n  /**\r\n   * The index of the destination step\r\n   */\r\n  stepIndex: number\r\n}\r\n\r\n/**\r\n * Checks whether the given `value` implements the interface [[StepIndex]].\r\n *\r\n * @param value The value to be checked\r\n * @returns True if the given value implements [[StepIndex]] and false otherwise\r\n */\r\nexport function isStepIndex(value: any): value is StepIndex {\r\n  return value.hasOwnProperty('stepIndex');\r\n}\r\n",
    "/**\r\n * Created by marc on 09.01.17.\r\n */\r\n\r\nimport {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\r\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {isStepId, StepId} from '../util/step-id.interface';\r\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\r\n\r\n/**\r\n * The `awGoToStep` directive can be used to navigate to a given step.\r\n * This step can be defined in one of multiple formats\r\n *\r\n * ### Syntax\r\n *\r\n * With absolute step index:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With unique step id:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With a wizard step object:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * With an offset to the defining step:\r\n *\r\n * ```html\r\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awGoToStep]'\r\n})\r\nexport class GoToStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\r\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\r\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\r\n   * or a step index as a number or string\r\n   */\r\n    // tslint:disable-next-line:no-input-rename\r\n  @Input('awGoToStep')\r\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\r\n   */\r\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Returns the destination step of this directive as an absolute step index inside the wizard\r\n   *\r\n   * @returns The index of the destination step\r\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\r\n   */\r\n  get destinationStep(): number {\r\n    let destinationStep: number;\r\n\r\n    if (isStepIndex(this.targetStep)) {\r\n      destinationStep = this.targetStep.stepIndex;\r\n    } else if (isStepId(this.targetStep)) {\r\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\r\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\r\n    } else if (this.targetStep instanceof WizardStep) {\r\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\r\n    } else {\r\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\r\n    }\r\n\r\n    return destinationStep;\r\n  }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the `destinationStep`\r\n   */\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: Event): void {\r\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awNextStep` directive can be used to navigate to the next step.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awNextStep (finalize)=\"finalize method\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awNextStep]'\r\n})\r\nexport class NextStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience name for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the next step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n",
    "import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\r\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awOptionalStep]'\r\n})\r\nexport class OptionalStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) { }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.optional = true;\r\n  }\r\n}\r\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\n\r\n/**\r\n * The `awPreviousStep` directive can be used to navigate to the previous step.\r\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awPreviousStep>...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awPreviousStep]'\r\n})\r\nexport class PreviousStepDirective {\r\n  /**\r\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public preFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\r\n   */\r\n  @Output()\r\n  public postFinalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   *\r\n   * @param emitter The [[EventEmitter]] to be set\r\n   */\r\n  @Output()\r\n  public set finalize(emitter: EventEmitter<void>) {\r\n    /* istanbul ignore next */\r\n    this.preFinalize = emitter;\r\n  }\r\n\r\n  /**\r\n   * A convenience field for `preFinalize`\r\n   */\r\n  public get finalize(): EventEmitter<void> {\r\n    return this.preFinalize;\r\n  }\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The state of the wizard\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Listener method for `click` events on the component with this directive.\r\n   * After this method is called the wizard will try to transition to the previous step\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\r\n  }\r\n}\r\n",
    "import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\r\nimport {WizardState} from '../navigation/wizard-state.model';\r\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\r\n\r\n/**\r\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\r\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awResetWizard]'\r\n})\r\nexport class ResetWizardDirective {\r\n  /**\r\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\r\n   */\r\n  @Output()\r\n  public finalize: EventEmitter<void> = new EventEmitter();\r\n\r\n  /**\r\n   * The navigation mode\r\n   */\r\n  private get navigationMode(): NavigationMode {\r\n    return this.wizardState.navigationMode;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardState The wizard state\r\n   */\r\n  constructor(private wizardState: WizardState) { }\r\n\r\n  /**\r\n   * Resets the wizard\r\n   */\r\n  @HostListener('click', ['$event']) onClick(event: Event): void {\r\n    // do some optional cleanup work\r\n    this.finalize.emit();\r\n    // reset the wizard to its initial state\r\n    this.navigationMode.reset();\r\n  }\r\n}\r\n",
    "import {Directive, Host, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awSelectedStep]'\r\n})\r\nexport class SelectedStepDirective implements OnInit {\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which should be selected by default\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  ngOnInit(): void {\r\n    this.wizardStep.defaultSelected = true;\r\n  }\r\n}\r\n",
    "import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\r\n\r\n/**\r\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\r\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\r\n * leaving it again to a previous step.\r\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\r\n * as completed.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\r\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\r\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\r\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With a navigation symbol from the `font-awesome` font:\r\n *\r\n * ```html\r\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardCompletionStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\r\n    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\r\n  ]\r\n})\r\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\r\n}\r\n",
    "import {Directive, forwardRef} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\r\n *\r\n * ### Syntax\r\n *\r\n * With `stepTitle` input:\r\n *\r\n * ```html\r\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` directive:\r\n *\r\n * ```html\r\n * <div awWizardStep [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\r\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\r\n *    <ng-template awWizardStepTitle>\r\n *        step title\r\n *    </ng-template>\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * With `stepTitle` input:\r\n *\r\n * ```html\r\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    ...\r\n * </div>\r\n * ```\r\n *\r\n * With `awWizardStepTitle` directive:\r\n *\r\n * ```html\r\n * <div awWizardStep [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\r\n *    <ng-template awWizardStepTitle>\r\n *        Address information\r\n *    </ng-template>\r\n * </div>\r\n * ```\r\n *\r\n * @author Marc Arndt\r\n */\r\n@Directive({\r\n  selector: '[awWizardStep]',\r\n  providers: [\r\n    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\r\n  ]\r\n})\r\nexport class WizardStepDirective extends WizardStep {\r\n}\r\n",
    "import {CommonModule} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\n\r\nimport {WizardComponent} from './components/wizard.component';\r\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\r\nimport {WizardStepComponent} from './components/wizard-step.component';\r\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\r\n\r\nimport {NextStepDirective} from './directives/next-step.directive';\r\nimport {PreviousStepDirective} from './directives/previous-step.directive';\r\nimport {OptionalStepDirective} from './directives/optional-step.directive';\r\nimport {GoToStepDirective} from './directives/go-to-step.directive';\r\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\r\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\r\nimport {WizardStepDirective} from './directives/wizard-step.directive';\r\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\r\nimport {SelectedStepDirective} from './directives/selected-step.directive';\r\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\r\n\r\n/**\r\n * The module defining all the content inside `angular-archwizard`\r\n *\r\n * @author Marc Arndt\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    WizardComponent,\r\n    WizardStepComponent,\r\n    WizardNavigationBarComponent,\r\n    WizardCompletionStepComponent,\r\n    GoToStepDirective,\r\n    NextStepDirective,\r\n    PreviousStepDirective,\r\n    OptionalStepDirective,\r\n    WizardStepTitleDirective,\r\n    EnableBackLinksDirective,\r\n    WizardStepDirective,\r\n    WizardCompletionStepDirective,\r\n    SelectedStepDirective,\r\n    ResetWizardDirective\r\n  ]\r\n})\r\nexport class ArchwizardModule {\r\n  /* istanbul ignore next */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: ArchwizardModule, providers: []};\r\n  }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "d",
    "b",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "WizardStepTitleDirective",
    "templateRef",
    "type",
    "Directive",
    "args",
    "selector",
    "TemplateRef",
    "WizardStep",
    "navigationSymbol",
    "symbol",
    "completed",
    "selected",
    "defaultSelected",
    "optional",
    "canEnter",
    "canExit",
    "stepEnter",
    "EventEmitter",
    "stepExit",
    "defineProperty",
    "get",
    "canTransitionStep",
    "condition",
    "direction",
    "isBoolean",
    "Promise",
    "resolve",
    "Function",
    "reject",
    "Error",
    "enter",
    "emit",
    "exit",
    "canEnterStep",
    "canExitStep",
    "stepTitleTemplate",
    "ContentChild",
    "stepId",
    "Input",
    "stepTitle",
    "Output",
    "hidden",
    "HostBinding",
    "NavigationMode",
    "wizardState",
    "goToPreviousStep",
    "preFinalize",
    "postFinalize",
    "hasPreviousStep",
    "goToStep",
    "currentStepIndex",
    "goToNextStep",
    "hasNextStep",
    "FreeNavigationMode",
    "_super",
    "tslib_1.__extends",
    "canGoToStep",
    "destinationIndex",
    "_this",
    "hasStep",
    "movingDirection",
    "getMovingDirection",
    "then",
    "previous",
    "currentStep",
    "getStepAtIndex",
    "navigationAllowed",
    "MovingDirection",
    "Stay",
    "isNavigable",
    "reset",
    "defaultStepIndex",
    "wizardSteps",
    "forEach",
    "step",
    "Forwards",
    "WizardCompletionStep",
    "__spread",
    "arguments",
    "length",
    "concat",
    "SemiStrictNavigationMode",
    "allNormalStepsCompleted",
    "filter",
    "index",
    "every",
    "StrictNavigationMode",
    "some",
    "navigationModeFactory",
    "navigationMode",
    "WizardState",
    "_defaultStepIndex",
    "foundDefaultStep",
    "find",
    "getIndexOfStep",
    "set",
    "updateNavigationMode",
    "updatedNavigationMode",
    "updateWizardSteps",
    "updatedWizardSteps",
    "indexOf",
    "stepIndex",
    "isLastStep",
    "getIndexOfStepWithId",
    "findIndex",
    "destinationStep",
    "Backwards",
    "Injectable",
    "WizardComponent",
    "model",
    "navBarLocation",
    "navBarLayout",
    "navBarDirection",
    "disableNavigationBar",
    "ngOnChanges",
    "changes",
    "_b",
    "__values",
    "tslib_1.__values",
    "keys",
    "_c",
    "propName",
    "change",
    "firstChange",
    "parseInt",
    "currentValue",
    "ngAfterContentInit",
    "subscribe",
    "changedWizardSteps",
    "toArray",
    "navigation",
    "Component",
    "template",
    "styles",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "providers",
    "ContentChildren",
    "descendants",
    "horizontalOrientation",
    "verticalOrientation",
    "WizardCompletionStepComponent",
    "provide",
    "useExisting",
    "forwardRef",
    "WizardNavigationBarComponent",
    "slice",
    "reverse",
    "isCurrent",
    "wizardStep",
    "isDone",
    "isDefault",
    "isEditing",
    "isOptional",
    "WizardStepComponent",
    "EnableBackLinksDirective",
    "completionStep",
    "ngOnInit",
    "isStepOffset",
    "isStepId",
    "isStepIndex",
    "decorators",
    "Host",
    "GoToStepDirective",
    "emitter",
    "targetStep",
    "stepOffset",
    "onClick",
    "event",
    "Optional",
    "finalize",
    "HostListener",
    "NextStepDirective",
    "OptionalStepDirective",
    "PreviousStepDirective",
    "ResetWizardDirective",
    "SelectedStepDirective",
    "WizardCompletionStepDirective",
    "WizardStepDirective",
    "ArchwizardModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "exports"
  ],
  "mappings": "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"
}
